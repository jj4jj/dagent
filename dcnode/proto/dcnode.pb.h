// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcnode.proto

#ifndef PROTOBUF_dcnode_2eproto__INCLUDED
#define PROTOBUF_dcnode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace dcnode {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dcnode_2eproto();
void protobuf_AssignDesc_dcnode_2eproto();
void protobuf_ShutdownFile_dcnode_2eproto();

class MsgDCNodeRPC;
class MsgRegName;
class MsgExt;
class MsgDCNode;

enum MsgDCNodeType {
  MSG_REG_NAME = 1,
  MSG_HEART_BEAT = 2,
  MSG_RPC = 3,
  MSG_DATA = 4
};
bool MsgDCNodeType_IsValid(int value);
const MsgDCNodeType MsgDCNodeType_MIN = MSG_REG_NAME;
const MsgDCNodeType MsgDCNodeType_MAX = MSG_DATA;
const int MsgDCNodeType_ARRAYSIZE = MsgDCNodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgDCNodeType_descriptor();
inline const ::std::string& MsgDCNodeType_Name(MsgDCNodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgDCNodeType_descriptor(), value);
}
inline bool MsgDCNodeType_Parse(
    const ::std::string& name, MsgDCNodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgDCNodeType>(
    MsgDCNodeType_descriptor(), name, value);
}
enum MsgOption {
  MSG_OPT_REQ = 1,
  MSG_OPT_RSP = 2,
  MSG_OPT_PUSH = 3
};
bool MsgOption_IsValid(int value);
const MsgOption MsgOption_MIN = MSG_OPT_REQ;
const MsgOption MsgOption_MAX = MSG_OPT_PUSH;
const int MsgOption_ARRAYSIZE = MsgOption_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgOption_descriptor();
inline const ::std::string& MsgOption_Name(MsgOption value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgOption_descriptor(), value);
}
inline bool MsgOption_Parse(
    const ::std::string& name, MsgOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgOption>(
    MsgOption_descriptor(), name, value);
}
// ===================================================================

class MsgDCNodeRPC : public ::google::protobuf::Message {
 public:
  MsgDCNodeRPC();
  virtual ~MsgDCNodeRPC();
  
  MsgDCNodeRPC(const MsgDCNodeRPC& from);
  
  inline MsgDCNodeRPC& operator=(const MsgDCNodeRPC& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDCNodeRPC& default_instance();
  
  void Swap(MsgDCNodeRPC* other);
  
  // implements Message ----------------------------------------------
  
  MsgDCNodeRPC* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDCNodeRPC& from);
  void MergeFrom(const MsgDCNodeRPC& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint64 cookie = 2;
  inline bool has_cookie() const;
  inline void clear_cookie();
  static const int kCookieFieldNumber = 2;
  inline ::google::protobuf::uint64 cookie() const;
  inline void set_cookie(::google::protobuf::uint64 value);
  
  // optional int32 errcode = 3;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 3;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);
  
  // optional bytes request = 4;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 4;
  inline const ::std::string& request() const;
  inline void set_request(const ::std::string& value);
  inline void set_request(const char* value);
  inline void set_request(const void* value, size_t size);
  inline ::std::string* mutable_request();
  inline ::std::string* release_request();
  
  // optional bytes response = 5;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 5;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const void* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  
  // @@protoc_insertion_point(class_scope:dcnode.MsgDCNodeRPC)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cookie();
  inline void clear_has_cookie();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::uint64 cookie_;
  ::std::string* request_;
  ::std::string* response_;
  ::google::protobuf::int32 errcode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_dcnode_2eproto();
  friend void protobuf_AssignDesc_dcnode_2eproto();
  friend void protobuf_ShutdownFile_dcnode_2eproto();
  
  void InitAsDefaultInstance();
  static MsgDCNodeRPC* default_instance_;
};
// -------------------------------------------------------------------

class MsgRegName : public ::google::protobuf::Message {
 public:
  MsgRegName();
  virtual ~MsgRegName();
  
  MsgRegName(const MsgRegName& from);
  
  inline MsgRegName& operator=(const MsgRegName& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgRegName& default_instance();
  
  void Swap(MsgRegName* other);
  
  // implements Message ----------------------------------------------
  
  MsgRegName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgRegName& from);
  void MergeFrom(const MsgRegName& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 session = 1;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 1;
  inline ::google::protobuf::uint64 session() const;
  inline void set_session(::google::protobuf::uint64 value);
  
  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:dcnode.MsgRegName)
 private:
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_ret();
  inline void clear_has_ret();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 session_;
  ::google::protobuf::int32 ret_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dcnode_2eproto();
  friend void protobuf_AssignDesc_dcnode_2eproto();
  friend void protobuf_ShutdownFile_dcnode_2eproto();
  
  void InitAsDefaultInstance();
  static MsgRegName* default_instance_;
};
// -------------------------------------------------------------------

class MsgExt : public ::google::protobuf::Message {
 public:
  MsgExt();
  virtual ~MsgExt();
  
  MsgExt(const MsgExt& from);
  
  inline MsgExt& operator=(const MsgExt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgExt& default_instance();
  
  void Swap(MsgExt* other);
  
  // implements Message ----------------------------------------------
  
  MsgExt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgExt& from);
  void MergeFrom(const MsgExt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 unixtime = 1;
  inline bool has_unixtime() const;
  inline void clear_unixtime();
  static const int kUnixtimeFieldNumber = 1;
  inline ::google::protobuf::uint32 unixtime() const;
  inline void set_unixtime(::google::protobuf::uint32 value);
  
  // optional .dcnode.MsgOption opt = 3;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 3;
  inline dcnode::MsgOption opt() const;
  inline void set_opt(dcnode::MsgOption value);
  
  // @@protoc_insertion_point(class_scope:dcnode.MsgExt)
 private:
  inline void set_has_unixtime();
  inline void clear_has_unixtime();
  inline void set_has_opt();
  inline void clear_has_opt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 unixtime_;
  int opt_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_dcnode_2eproto();
  friend void protobuf_AssignDesc_dcnode_2eproto();
  friend void protobuf_ShutdownFile_dcnode_2eproto();
  
  void InitAsDefaultInstance();
  static MsgExt* default_instance_;
};
// -------------------------------------------------------------------

class MsgDCNode : public ::google::protobuf::Message {
 public:
  MsgDCNode();
  virtual ~MsgDCNode();
  
  MsgDCNode(const MsgDCNode& from);
  
  inline MsgDCNode& operator=(const MsgDCNode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDCNode& default_instance();
  
  void Swap(MsgDCNode* other);
  
  // implements Message ----------------------------------------------
  
  MsgDCNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDCNode& from);
  void MergeFrom(const MsgDCNode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  
  // optional string dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline const ::std::string& dst() const;
  inline void set_dst(const ::std::string& value);
  inline void set_dst(const char* value);
  inline void set_dst(const char* value, size_t size);
  inline ::std::string* mutable_dst();
  inline ::std::string* release_dst();
  
  // required .dcnode.MsgDCNodeType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline dcnode::MsgDCNodeType type() const;
  inline void set_type(dcnode::MsgDCNodeType value);
  
  // optional bytes msg_data = 4;
  inline bool has_msg_data() const;
  inline void clear_msg_data();
  static const int kMsgDataFieldNumber = 4;
  inline const ::std::string& msg_data() const;
  inline void set_msg_data(const ::std::string& value);
  inline void set_msg_data(const char* value);
  inline void set_msg_data(const void* value, size_t size);
  inline ::std::string* mutable_msg_data();
  inline ::std::string* release_msg_data();
  
  // optional .dcnode.MsgExt ext = 5;
  inline bool has_ext() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 5;
  inline const ::dcnode::MsgExt& ext() const;
  inline ::dcnode::MsgExt* mutable_ext();
  inline ::dcnode::MsgExt* release_ext();
  
  // optional .dcnode.MsgRegName reg_name = 6;
  inline bool has_reg_name() const;
  inline void clear_reg_name();
  static const int kRegNameFieldNumber = 6;
  inline const ::dcnode::MsgRegName& reg_name() const;
  inline ::dcnode::MsgRegName* mutable_reg_name();
  inline ::dcnode::MsgRegName* release_reg_name();
  
  // optional .dcnode.MsgDCNodeRPC rpc = 7;
  inline bool has_rpc() const;
  inline void clear_rpc();
  static const int kRpcFieldNumber = 7;
  inline const ::dcnode::MsgDCNodeRPC& rpc() const;
  inline ::dcnode::MsgDCNodeRPC* mutable_rpc();
  inline ::dcnode::MsgDCNodeRPC* release_rpc();
  
  // @@protoc_insertion_point(class_scope:dcnode.MsgDCNode)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dst();
  inline void clear_has_dst();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg_data();
  inline void clear_has_msg_data();
  inline void set_has_ext();
  inline void clear_has_ext();
  inline void set_has_reg_name();
  inline void clear_has_reg_name();
  inline void set_has_rpc();
  inline void clear_has_rpc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* src_;
  ::std::string* dst_;
  ::std::string* msg_data_;
  ::dcnode::MsgExt* ext_;
  ::dcnode::MsgRegName* reg_name_;
  ::dcnode::MsgDCNodeRPC* rpc_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_dcnode_2eproto();
  friend void protobuf_AssignDesc_dcnode_2eproto();
  friend void protobuf_ShutdownFile_dcnode_2eproto();
  
  void InitAsDefaultInstance();
  static MsgDCNode* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgDCNodeRPC

// required string name = 1;
inline bool MsgDCNodeRPC::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDCNodeRPC::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDCNodeRPC::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDCNodeRPC::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MsgDCNodeRPC::name() const {
  return *name_;
}
inline void MsgDCNodeRPC::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgDCNodeRPC::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgDCNodeRPC::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgDCNodeRPC::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MsgDCNodeRPC::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 cookie = 2;
inline bool MsgDCNodeRPC::has_cookie() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDCNodeRPC::set_has_cookie() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDCNodeRPC::clear_has_cookie() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDCNodeRPC::clear_cookie() {
  cookie_ = GOOGLE_ULONGLONG(0);
  clear_has_cookie();
}
inline ::google::protobuf::uint64 MsgDCNodeRPC::cookie() const {
  return cookie_;
}
inline void MsgDCNodeRPC::set_cookie(::google::protobuf::uint64 value) {
  set_has_cookie();
  cookie_ = value;
}

// optional int32 errcode = 3;
inline bool MsgDCNodeRPC::has_errcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDCNodeRPC::set_has_errcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDCNodeRPC::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDCNodeRPC::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 MsgDCNodeRPC::errcode() const {
  return errcode_;
}
inline void MsgDCNodeRPC::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
}

// optional bytes request = 4;
inline bool MsgDCNodeRPC::has_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgDCNodeRPC::set_has_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgDCNodeRPC::clear_has_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgDCNodeRPC::clear_request() {
  if (request_ != &::google::protobuf::internal::kEmptyString) {
    request_->clear();
  }
  clear_has_request();
}
inline const ::std::string& MsgDCNodeRPC::request() const {
  return *request_;
}
inline void MsgDCNodeRPC::set_request(const ::std::string& value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(value);
}
inline void MsgDCNodeRPC::set_request(const char* value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(value);
}
inline void MsgDCNodeRPC::set_request(const void* value, size_t size) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  request_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgDCNodeRPC::mutable_request() {
  set_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    request_ = new ::std::string;
  }
  return request_;
}
inline ::std::string* MsgDCNodeRPC::release_request() {
  clear_has_request();
  if (request_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_;
    request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes response = 5;
inline bool MsgDCNodeRPC::has_response() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgDCNodeRPC::set_has_response() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgDCNodeRPC::clear_has_response() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgDCNodeRPC::clear_response() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& MsgDCNodeRPC::response() const {
  return *response_;
}
inline void MsgDCNodeRPC::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void MsgDCNodeRPC::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(value);
}
inline void MsgDCNodeRPC::set_response(const void* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgDCNodeRPC::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    response_ = new ::std::string;
  }
  return response_;
}
inline ::std::string* MsgDCNodeRPC::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MsgRegName

// optional uint64 session = 1;
inline bool MsgRegName::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgRegName::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgRegName::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgRegName::clear_session() {
  session_ = GOOGLE_ULONGLONG(0);
  clear_has_session();
}
inline ::google::protobuf::uint64 MsgRegName::session() const {
  return session_;
}
inline void MsgRegName::set_session(::google::protobuf::uint64 value) {
  set_has_session();
  session_ = value;
}

// optional int32 ret = 2;
inline bool MsgRegName::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgRegName::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgRegName::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgRegName::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 MsgRegName::ret() const {
  return ret_;
}
inline void MsgRegName::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// MsgExt

// optional uint32 unixtime = 1;
inline bool MsgExt::has_unixtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgExt::set_has_unixtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgExt::clear_has_unixtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgExt::clear_unixtime() {
  unixtime_ = 0u;
  clear_has_unixtime();
}
inline ::google::protobuf::uint32 MsgExt::unixtime() const {
  return unixtime_;
}
inline void MsgExt::set_unixtime(::google::protobuf::uint32 value) {
  set_has_unixtime();
  unixtime_ = value;
}

// optional .dcnode.MsgOption opt = 3;
inline bool MsgExt::has_opt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgExt::set_has_opt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgExt::clear_has_opt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgExt::clear_opt() {
  opt_ = 1;
  clear_has_opt();
}
inline dcnode::MsgOption MsgExt::opt() const {
  return static_cast< dcnode::MsgOption >(opt_);
}
inline void MsgExt::set_opt(dcnode::MsgOption value) {
  GOOGLE_DCHECK(dcnode::MsgOption_IsValid(value));
  set_has_opt();
  opt_ = value;
}

// -------------------------------------------------------------------

// MsgDCNode

// required string src = 1;
inline bool MsgDCNode::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDCNode::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDCNode::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDCNode::clear_src() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& MsgDCNode::src() const {
  return *src_;
}
inline void MsgDCNode::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void MsgDCNode::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(value);
}
inline void MsgDCNode::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgDCNode::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    src_ = new ::std::string;
  }
  return src_;
}
inline ::std::string* MsgDCNode::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string dst = 2;
inline bool MsgDCNode::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDCNode::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDCNode::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDCNode::clear_dst() {
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    dst_->clear();
  }
  clear_has_dst();
}
inline const ::std::string& MsgDCNode::dst() const {
  return *dst_;
}
inline void MsgDCNode::set_dst(const ::std::string& value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void MsgDCNode::set_dst(const char* value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
}
inline void MsgDCNode::set_dst(const char* value, size_t size) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  dst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgDCNode::mutable_dst() {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    dst_ = new ::std::string;
  }
  return dst_;
}
inline ::std::string* MsgDCNode::release_dst() {
  clear_has_dst();
  if (dst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dst_;
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .dcnode.MsgDCNodeType type = 3;
inline bool MsgDCNode::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDCNode::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDCNode::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDCNode::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline dcnode::MsgDCNodeType MsgDCNode::type() const {
  return static_cast< dcnode::MsgDCNodeType >(type_);
}
inline void MsgDCNode::set_type(dcnode::MsgDCNodeType value) {
  GOOGLE_DCHECK(dcnode::MsgDCNodeType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes msg_data = 4;
inline bool MsgDCNode::has_msg_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgDCNode::set_has_msg_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgDCNode::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgDCNode::clear_msg_data() {
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    msg_data_->clear();
  }
  clear_has_msg_data();
}
inline const ::std::string& MsgDCNode::msg_data() const {
  return *msg_data_;
}
inline void MsgDCNode::set_msg_data(const ::std::string& value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
}
inline void MsgDCNode::set_msg_data(const char* value) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(value);
}
inline void MsgDCNode::set_msg_data(const void* value, size_t size) {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  msg_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgDCNode::mutable_msg_data() {
  set_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    msg_data_ = new ::std::string;
  }
  return msg_data_;
}
inline ::std::string* MsgDCNode::release_msg_data() {
  clear_has_msg_data();
  if (msg_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_data_;
    msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .dcnode.MsgExt ext = 5;
inline bool MsgDCNode::has_ext() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgDCNode::set_has_ext() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgDCNode::clear_has_ext() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgDCNode::clear_ext() {
  if (ext_ != NULL) ext_->::dcnode::MsgExt::Clear();
  clear_has_ext();
}
inline const ::dcnode::MsgExt& MsgDCNode::ext() const {
  return ext_ != NULL ? *ext_ : *default_instance_->ext_;
}
inline ::dcnode::MsgExt* MsgDCNode::mutable_ext() {
  set_has_ext();
  if (ext_ == NULL) ext_ = new ::dcnode::MsgExt;
  return ext_;
}
inline ::dcnode::MsgExt* MsgDCNode::release_ext() {
  clear_has_ext();
  ::dcnode::MsgExt* temp = ext_;
  ext_ = NULL;
  return temp;
}

// optional .dcnode.MsgRegName reg_name = 6;
inline bool MsgDCNode::has_reg_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgDCNode::set_has_reg_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgDCNode::clear_has_reg_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgDCNode::clear_reg_name() {
  if (reg_name_ != NULL) reg_name_->::dcnode::MsgRegName::Clear();
  clear_has_reg_name();
}
inline const ::dcnode::MsgRegName& MsgDCNode::reg_name() const {
  return reg_name_ != NULL ? *reg_name_ : *default_instance_->reg_name_;
}
inline ::dcnode::MsgRegName* MsgDCNode::mutable_reg_name() {
  set_has_reg_name();
  if (reg_name_ == NULL) reg_name_ = new ::dcnode::MsgRegName;
  return reg_name_;
}
inline ::dcnode::MsgRegName* MsgDCNode::release_reg_name() {
  clear_has_reg_name();
  ::dcnode::MsgRegName* temp = reg_name_;
  reg_name_ = NULL;
  return temp;
}

// optional .dcnode.MsgDCNodeRPC rpc = 7;
inline bool MsgDCNode::has_rpc() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgDCNode::set_has_rpc() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgDCNode::clear_has_rpc() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgDCNode::clear_rpc() {
  if (rpc_ != NULL) rpc_->::dcnode::MsgDCNodeRPC::Clear();
  clear_has_rpc();
}
inline const ::dcnode::MsgDCNodeRPC& MsgDCNode::rpc() const {
  return rpc_ != NULL ? *rpc_ : *default_instance_->rpc_;
}
inline ::dcnode::MsgDCNodeRPC* MsgDCNode::mutable_rpc() {
  set_has_rpc();
  if (rpc_ == NULL) rpc_ = new ::dcnode::MsgDCNodeRPC;
  return rpc_;
}
inline ::dcnode::MsgDCNodeRPC* MsgDCNode::release_rpc() {
  clear_has_rpc();
  ::dcnode::MsgDCNodeRPC* temp = rpc_;
  rpc_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dcnode

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< dcnode::MsgDCNodeType>() {
  return dcnode::MsgDCNodeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< dcnode::MsgOption>() {
  return dcnode::MsgOption_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dcnode_2eproto__INCLUDED
