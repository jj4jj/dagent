// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dcnode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dcnode {

namespace {

const ::google::protobuf::Descriptor* MsgDCNodeRPC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDCNodeRPC_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgExt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgExt_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDCNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDCNode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgDCNodeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dcnode_2eproto() {
  protobuf_AddDesc_dcnode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dcnode.proto");
  GOOGLE_CHECK(file != NULL);
  MsgDCNodeRPC_descriptor_ = file->message_type(0);
  static const int MsgDCNodeRPC_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNodeRPC, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNodeRPC, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNodeRPC, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNodeRPC, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNodeRPC, response_),
  };
  MsgDCNodeRPC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDCNodeRPC_descriptor_,
      MsgDCNodeRPC::default_instance_,
      MsgDCNodeRPC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNodeRPC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNodeRPC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDCNodeRPC));
  MsgExt_descriptor_ = file->message_type(1);
  static const int MsgExt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExt, unixtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExt, rpc_),
  };
  MsgExt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgExt_descriptor_,
      MsgExt::default_instance_,
      MsgExt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgExt));
  MsgDCNode_descriptor_ = file->message_type(2);
  static const int MsgDCNode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNode, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNode, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNode, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNode, ext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNode, msg_data_),
  };
  MsgDCNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDCNode_descriptor_,
      MsgDCNode::default_instance_,
      MsgDCNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDCNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDCNode));
  MsgDCNodeType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dcnode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDCNodeRPC_descriptor_, &MsgDCNodeRPC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgExt_descriptor_, &MsgExt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDCNode_descriptor_, &MsgDCNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dcnode_2eproto() {
  delete MsgDCNodeRPC::default_instance_;
  delete MsgDCNodeRPC_reflection_;
  delete MsgExt::default_instance_;
  delete MsgExt_reflection_;
  delete MsgDCNode::default_instance_;
  delete MsgDCNode_reflection_;
}

void protobuf_AddDesc_dcnode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014dcnode.proto\022\006dcnode\"`\n\014MsgDCNodeRPC\022\014"
    "\n\004name\030\001 \002(\t\022\016\n\006cookie\030\002 \002(\004\022\017\n\007errcode\030"
    "\003 \001(\005\022\017\n\007request\030\004 \001(\014\022\020\n\010response\030\005 \001(\014"
    "\"=\n\006MsgExt\022\020\n\010unixtime\030\001 \001(\r\022!\n\003rpc\030\002 \001("
    "\0132\024.dcnode.MsgDCNodeRPC\"y\n\tMsgDCNode\022\013\n\003"
    "src\030\001 \002(\t\022\013\n\003dst\030\002 \001(\t\022#\n\004type\030\003 \002(\0162\025.d"
    "cnode.MsgDCNodeType\022\033\n\003ext\030\004 \001(\0132\016.dcnod"
    "e.MsgExt\022\020\n\010msg_data\030\005 \001(\014*P\n\rMsgDCNodeT"
    "ype\022\020\n\014MSG_REG_NAME\020\001\022\022\n\016MSG_HEART_BEAT\020"
    "\002\022\013\n\007MSG_RPC\020\003\022\014\n\010MSG_DATA\020\004", 388);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dcnode.proto", &protobuf_RegisterTypes);
  MsgDCNodeRPC::default_instance_ = new MsgDCNodeRPC();
  MsgExt::default_instance_ = new MsgExt();
  MsgDCNode::default_instance_ = new MsgDCNode();
  MsgDCNodeRPC::default_instance_->InitAsDefaultInstance();
  MsgExt::default_instance_->InitAsDefaultInstance();
  MsgDCNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dcnode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dcnode_2eproto {
  StaticDescriptorInitializer_dcnode_2eproto() {
    protobuf_AddDesc_dcnode_2eproto();
  }
} static_descriptor_initializer_dcnode_2eproto_;

const ::google::protobuf::EnumDescriptor* MsgDCNodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDCNodeType_descriptor_;
}
bool MsgDCNodeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDCNodeRPC::kNameFieldNumber;
const int MsgDCNodeRPC::kCookieFieldNumber;
const int MsgDCNodeRPC::kErrcodeFieldNumber;
const int MsgDCNodeRPC::kRequestFieldNumber;
const int MsgDCNodeRPC::kResponseFieldNumber;
#endif  // !_MSC_VER

MsgDCNodeRPC::MsgDCNodeRPC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgDCNodeRPC::InitAsDefaultInstance() {
}

MsgDCNodeRPC::MsgDCNodeRPC(const MsgDCNodeRPC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgDCNodeRPC::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cookie_ = GOOGLE_ULONGLONG(0);
  errcode_ = 0;
  request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDCNodeRPC::~MsgDCNodeRPC() {
  SharedDtor();
}

void MsgDCNodeRPC::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (request_ != &::google::protobuf::internal::kEmptyString) {
    delete request_;
  }
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    delete response_;
  }
  if (this != default_instance_) {
  }
}

void MsgDCNodeRPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDCNodeRPC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDCNodeRPC_descriptor_;
}

const MsgDCNodeRPC& MsgDCNodeRPC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcnode_2eproto();  return *default_instance_;
}

MsgDCNodeRPC* MsgDCNodeRPC::default_instance_ = NULL;

MsgDCNodeRPC* MsgDCNodeRPC::New() const {
  return new MsgDCNodeRPC;
}

void MsgDCNodeRPC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    cookie_ = GOOGLE_ULONGLONG(0);
    errcode_ = 0;
    if (has_request()) {
      if (request_ != &::google::protobuf::internal::kEmptyString) {
        request_->clear();
      }
    }
    if (has_response()) {
      if (response_ != &::google::protobuf::internal::kEmptyString) {
        response_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDCNodeRPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cookie;
        break;
      }
      
      // required uint64 cookie = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cookie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cookie_)));
          set_has_cookie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_errcode;
        break;
      }
      
      // optional int32 errcode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_request;
        break;
      }
      
      // optional bytes request = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_response;
        break;
      }
      
      // optional bytes response = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDCNodeRPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required uint64 cookie = 2;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cookie(), output);
  }
  
  // optional int32 errcode = 3;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errcode(), output);
  }
  
  // optional bytes request = 4;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->request(), output);
  }
  
  // optional bytes response = 5;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->response(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDCNodeRPC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required uint64 cookie = 2;
  if (has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cookie(), target);
  }
  
  // optional int32 errcode = 3;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->errcode(), target);
  }
  
  // optional bytes request = 4;
  if (has_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->request(), target);
  }
  
  // optional bytes response = 5;
  if (has_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->response(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDCNodeRPC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required uint64 cookie = 2;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cookie());
    }
    
    // optional int32 errcode = 3;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }
    
    // optional bytes request = 4;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request());
    }
    
    // optional bytes response = 5;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDCNodeRPC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDCNodeRPC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDCNodeRPC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDCNodeRPC::MergeFrom(const MsgDCNodeRPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_request()) {
      set_request(from.request());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDCNodeRPC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDCNodeRPC::CopyFrom(const MsgDCNodeRPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDCNodeRPC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgDCNodeRPC::Swap(MsgDCNodeRPC* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(cookie_, other->cookie_);
    std::swap(errcode_, other->errcode_);
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDCNodeRPC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDCNodeRPC_descriptor_;
  metadata.reflection = MsgDCNodeRPC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgExt::kUnixtimeFieldNumber;
const int MsgExt::kRpcFieldNumber;
#endif  // !_MSC_VER

MsgExt::MsgExt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgExt::InitAsDefaultInstance() {
  rpc_ = const_cast< ::dcnode::MsgDCNodeRPC*>(&::dcnode::MsgDCNodeRPC::default_instance());
}

MsgExt::MsgExt(const MsgExt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgExt::SharedCtor() {
  _cached_size_ = 0;
  unixtime_ = 0u;
  rpc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgExt::~MsgExt() {
  SharedDtor();
}

void MsgExt::SharedDtor() {
  if (this != default_instance_) {
    delete rpc_;
  }
}

void MsgExt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgExt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgExt_descriptor_;
}

const MsgExt& MsgExt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcnode_2eproto();  return *default_instance_;
}

MsgExt* MsgExt::default_instance_ = NULL;

MsgExt* MsgExt::New() const {
  return new MsgExt;
}

void MsgExt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unixtime_ = 0u;
    if (has_rpc()) {
      if (rpc_ != NULL) rpc_->::dcnode::MsgDCNodeRPC::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgExt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unixtime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unixtime_)));
          set_has_unixtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rpc;
        break;
      }
      
      // optional .dcnode.MsgDCNodeRPC rpc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rpc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgExt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 unixtime = 1;
  if (has_unixtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unixtime(), output);
  }
  
  // optional .dcnode.MsgDCNodeRPC rpc = 2;
  if (has_rpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rpc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgExt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 unixtime = 1;
  if (has_unixtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unixtime(), target);
  }
  
  // optional .dcnode.MsgDCNodeRPC rpc = 2;
  if (has_rpc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rpc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgExt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 unixtime = 1;
    if (has_unixtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unixtime());
    }
    
    // optional .dcnode.MsgDCNodeRPC rpc = 2;
    if (has_rpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rpc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgExt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgExt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgExt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgExt::MergeFrom(const MsgExt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unixtime()) {
      set_unixtime(from.unixtime());
    }
    if (from.has_rpc()) {
      mutable_rpc()->::dcnode::MsgDCNodeRPC::MergeFrom(from.rpc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgExt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgExt::CopyFrom(const MsgExt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgExt::IsInitialized() const {
  
  if (has_rpc()) {
    if (!this->rpc().IsInitialized()) return false;
  }
  return true;
}

void MsgExt::Swap(MsgExt* other) {
  if (other != this) {
    std::swap(unixtime_, other->unixtime_);
    std::swap(rpc_, other->rpc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgExt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgExt_descriptor_;
  metadata.reflection = MsgExt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDCNode::kSrcFieldNumber;
const int MsgDCNode::kDstFieldNumber;
const int MsgDCNode::kTypeFieldNumber;
const int MsgDCNode::kExtFieldNumber;
const int MsgDCNode::kMsgDataFieldNumber;
#endif  // !_MSC_VER

MsgDCNode::MsgDCNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgDCNode::InitAsDefaultInstance() {
  ext_ = const_cast< ::dcnode::MsgExt*>(&::dcnode::MsgExt::default_instance());
}

MsgDCNode::MsgDCNode(const MsgDCNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgDCNode::SharedCtor() {
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  ext_ = NULL;
  msg_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDCNode::~MsgDCNode() {
  SharedDtor();
}

void MsgDCNode::SharedDtor() {
  if (src_ != &::google::protobuf::internal::kEmptyString) {
    delete src_;
  }
  if (dst_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_;
  }
  if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_data_;
  }
  if (this != default_instance_) {
    delete ext_;
  }
}

void MsgDCNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDCNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDCNode_descriptor_;
}

const MsgDCNode& MsgDCNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcnode_2eproto();  return *default_instance_;
}

MsgDCNode* MsgDCNode::default_instance_ = NULL;

MsgDCNode* MsgDCNode::New() const {
  return new MsgDCNode;
}

void MsgDCNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::kEmptyString) {
        src_->clear();
      }
    }
    if (has_dst()) {
      if (dst_ != &::google::protobuf::internal::kEmptyString) {
        dst_->clear();
      }
    }
    type_ = 1;
    if (has_ext()) {
      if (ext_ != NULL) ext_->::dcnode::MsgExt::Clear();
    }
    if (has_msg_data()) {
      if (msg_data_ != &::google::protobuf::internal::kEmptyString) {
        msg_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDCNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }
      
      // optional string dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required .dcnode.MsgDCNodeType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dcnode::MsgDCNodeType_IsValid(value)) {
            set_type(static_cast< dcnode::MsgDCNodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ext;
        break;
      }
      
      // optional .dcnode.MsgExt ext = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_msg_data;
        break;
      }
      
      // optional bytes msg_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDCNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->src(), output);
  }
  
  // optional string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dst(), output);
  }
  
  // required .dcnode.MsgDCNodeType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // optional .dcnode.MsgExt ext = 4;
  if (has_ext()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ext(), output);
  }
  
  // optional bytes msg_data = 5;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->msg_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDCNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }
  
  // optional string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }
  
  // required .dcnode.MsgDCNodeType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // optional .dcnode.MsgExt ext = 4;
  if (has_ext()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ext(), target);
  }
  
  // optional bytes msg_data = 5;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->msg_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDCNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }
    
    // optional string dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst());
    }
    
    // required .dcnode.MsgDCNodeType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .dcnode.MsgExt ext = 4;
    if (has_ext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ext());
    }
    
    // optional bytes msg_data = 5;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDCNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDCNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDCNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDCNode::MergeFrom(const MsgDCNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ext()) {
      mutable_ext()->::dcnode::MsgExt::MergeFrom(from.ext());
    }
    if (from.has_msg_data()) {
      set_msg_data(from.msg_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDCNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDCNode::CopyFrom(const MsgDCNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDCNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_ext()) {
    if (!this->ext().IsInitialized()) return false;
  }
  return true;
}

void MsgDCNode::Swap(MsgDCNode* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(type_, other->type_);
    std::swap(ext_, other->ext_);
    std::swap(msg_data_, other->msg_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDCNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDCNode_descriptor_;
  metadata.reflection = MsgDCNode_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dcnode

// @@protoc_insertion_point(global_scope)
