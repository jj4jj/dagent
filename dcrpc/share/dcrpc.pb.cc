// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcrpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dcrpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dcrpc {

namespace {

const ::google::protobuf::Descriptor* RpcMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpcMsg_Cookie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpcMsg_Cookie_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcMsg_StatusCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dcrpc_2eproto() {
  protobuf_AddDesc_dcrpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dcrpc.proto");
  GOOGLE_CHECK(file != NULL);
  RpcMsg_descriptor_ = file->message_type(0);
  static const int RpcMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMsg, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMsg, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMsg, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMsg, notify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMsg, cookie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMsg, status_),
  };
  RpcMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcMsg_descriptor_,
      RpcMsg::default_instance_,
      RpcMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcMsg));
  RpcMsg_Cookie_descriptor_ = RpcMsg_descriptor_->nested_type(0);
  static const int RpcMsg_Cookie_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMsg_Cookie, transaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMsg_Cookie, cookie_),
  };
  RpcMsg_Cookie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpcMsg_Cookie_descriptor_,
      RpcMsg_Cookie::default_instance_,
      RpcMsg_Cookie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMsg_Cookie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpcMsg_Cookie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpcMsg_Cookie));
  RpcMsg_StatusCode_descriptor_ = RpcMsg_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dcrpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcMsg_descriptor_, &RpcMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpcMsg_Cookie_descriptor_, &RpcMsg_Cookie::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dcrpc_2eproto() {
  delete RpcMsg::default_instance_;
  delete RpcMsg_reflection_;
  delete RpcMsg_Cookie::default_instance_;
  delete RpcMsg_Cookie_reflection_;
}

void protobuf_AddDesc_dcrpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013dcrpc.proto\022\005dcrpc\"\210\002\n\006RpcMsg\022\014\n\004path\030"
    "\001 \002(\t\022\017\n\007request\030\002 \001(\014\022\020\n\010response\030\003 \001(\014"
    "\022\016\n\006notify\030\004 \001(\014\022$\n\006cookie\030\005 \001(\0132\024.dcrpc"
    ".RpcMsg.Cookie\022(\n\006status\030\006 \001(\0162\030.dcrpc.R"
    "pcMsg.StatusCode\032-\n\006Cookie\022\023\n\013transactio"
    "n\030\001 \001(\004\022\016\n\006cookie\030\002 \001(\014\">\n\nStatusCode\022\026\n"
    "\022RPC_STATUS_SUCCESS\020\001\022\030\n\024RPC_STATUS_NOT_"
    "EXIST\020\002", 287);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dcrpc.proto", &protobuf_RegisterTypes);
  RpcMsg::default_instance_ = new RpcMsg();
  RpcMsg_Cookie::default_instance_ = new RpcMsg_Cookie();
  RpcMsg::default_instance_->InitAsDefaultInstance();
  RpcMsg_Cookie::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dcrpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dcrpc_2eproto {
  StaticDescriptorInitializer_dcrpc_2eproto() {
    protobuf_AddDesc_dcrpc_2eproto();
  }
} static_descriptor_initializer_dcrpc_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RpcMsg_StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcMsg_StatusCode_descriptor_;
}
bool RpcMsg_StatusCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RpcMsg_StatusCode RpcMsg::RPC_STATUS_SUCCESS;
const RpcMsg_StatusCode RpcMsg::RPC_STATUS_NOT_EXIST;
const RpcMsg_StatusCode RpcMsg::StatusCode_MIN;
const RpcMsg_StatusCode RpcMsg::StatusCode_MAX;
const int RpcMsg::StatusCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RpcMsg_Cookie::kTransactionFieldNumber;
const int RpcMsg_Cookie::kCookieFieldNumber;
#endif  // !_MSC_VER

RpcMsg_Cookie::RpcMsg_Cookie()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcrpc.RpcMsg.Cookie)
}

void RpcMsg_Cookie::InitAsDefaultInstance() {
}

RpcMsg_Cookie::RpcMsg_Cookie(const RpcMsg_Cookie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcrpc.RpcMsg.Cookie)
}

void RpcMsg_Cookie::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  transaction_ = GOOGLE_ULONGLONG(0);
  cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcMsg_Cookie::~RpcMsg_Cookie() {
  // @@protoc_insertion_point(destructor:dcrpc.RpcMsg.Cookie)
  SharedDtor();
}

void RpcMsg_Cookie::SharedDtor() {
  if (cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cookie_;
  }
  if (this != default_instance_) {
  }
}

void RpcMsg_Cookie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMsg_Cookie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcMsg_Cookie_descriptor_;
}

const RpcMsg_Cookie& RpcMsg_Cookie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcrpc_2eproto();
  return *default_instance_;
}

RpcMsg_Cookie* RpcMsg_Cookie::default_instance_ = NULL;

RpcMsg_Cookie* RpcMsg_Cookie::New() const {
  return new RpcMsg_Cookie;
}

void RpcMsg_Cookie::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    transaction_ = GOOGLE_ULONGLONG(0);
    if (has_cookie()) {
      if (cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cookie_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcMsg_Cookie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcrpc.RpcMsg.Cookie)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 transaction = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_)));
          set_has_transaction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cookie;
        break;
      }

      // optional bytes cookie = 2;
      case 2: {
        if (tag == 18) {
         parse_cookie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cookie()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcrpc.RpcMsg.Cookie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcrpc.RpcMsg.Cookie)
  return false;
#undef DO_
}

void RpcMsg_Cookie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcrpc.RpcMsg.Cookie)
  // optional uint64 transaction = 1;
  if (has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->transaction(), output);
  }

  // optional bytes cookie = 2;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->cookie(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcrpc.RpcMsg.Cookie)
}

::google::protobuf::uint8* RpcMsg_Cookie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcrpc.RpcMsg.Cookie)
  // optional uint64 transaction = 1;
  if (has_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->transaction(), target);
  }

  // optional bytes cookie = 2;
  if (has_cookie()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cookie(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcrpc.RpcMsg.Cookie)
  return target;
}

int RpcMsg_Cookie::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 transaction = 1;
    if (has_transaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction());
    }

    // optional bytes cookie = 2;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cookie());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMsg_Cookie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcMsg_Cookie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcMsg_Cookie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcMsg_Cookie::MergeFrom(const RpcMsg_Cookie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction()) {
      set_transaction(from.transaction());
    }
    if (from.has_cookie()) {
      set_cookie(from.cookie());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcMsg_Cookie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMsg_Cookie::CopyFrom(const RpcMsg_Cookie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMsg_Cookie::IsInitialized() const {

  return true;
}

void RpcMsg_Cookie::Swap(RpcMsg_Cookie* other) {
  if (other != this) {
    std::swap(transaction_, other->transaction_);
    std::swap(cookie_, other->cookie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcMsg_Cookie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcMsg_Cookie_descriptor_;
  metadata.reflection = RpcMsg_Cookie_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RpcMsg::kPathFieldNumber;
const int RpcMsg::kRequestFieldNumber;
const int RpcMsg::kResponseFieldNumber;
const int RpcMsg::kNotifyFieldNumber;
const int RpcMsg::kCookieFieldNumber;
const int RpcMsg::kStatusFieldNumber;
#endif  // !_MSC_VER

RpcMsg::RpcMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dcrpc.RpcMsg)
}

void RpcMsg::InitAsDefaultInstance() {
  cookie_ = const_cast< ::dcrpc::RpcMsg_Cookie*>(&::dcrpc::RpcMsg_Cookie::default_instance());
}

RpcMsg::RpcMsg(const RpcMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dcrpc.RpcMsg)
}

void RpcMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notify_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cookie_ = NULL;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpcMsg::~RpcMsg() {
  // @@protoc_insertion_point(destructor:dcrpc.RpcMsg)
  SharedDtor();
}

void RpcMsg::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_;
  }
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_;
  }
  if (notify_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notify_;
  }
  if (this != default_instance_) {
    delete cookie_;
  }
}

void RpcMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpcMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcMsg_descriptor_;
}

const RpcMsg& RpcMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcrpc_2eproto();
  return *default_instance_;
}

RpcMsg* RpcMsg::default_instance_ = NULL;

RpcMsg* RpcMsg::New() const {
  return new RpcMsg;
}

void RpcMsg::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_request()) {
      if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        request_->clear();
      }
    }
    if (has_response()) {
      if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        response_->clear();
      }
    }
    if (has_notify()) {
      if (notify_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notify_->clear();
      }
    }
    if (has_cookie()) {
      if (cookie_ != NULL) cookie_->::dcrpc::RpcMsg_Cookie::Clear();
    }
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpcMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dcrpc.RpcMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }

      // optional bytes request = 2;
      case 2: {
        if (tag == 18) {
         parse_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_response;
        break;
      }

      // optional bytes response = 3;
      case 3: {
        if (tag == 26) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_notify;
        break;
      }

      // optional bytes notify = 4;
      case 4: {
        if (tag == 34) {
         parse_notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notify()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cookie;
        break;
      }

      // optional .dcrpc.RpcMsg.Cookie cookie = 5;
      case 5: {
        if (tag == 42) {
         parse_cookie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cookie()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional .dcrpc.RpcMsg.StatusCode status = 6;
      case 6: {
        if (tag == 48) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dcrpc::RpcMsg_StatusCode_IsValid(value)) {
            set_status(static_cast< ::dcrpc::RpcMsg_StatusCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dcrpc.RpcMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dcrpc.RpcMsg)
  return false;
#undef DO_
}

void RpcMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dcrpc.RpcMsg)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional bytes request = 2;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->request(), output);
  }

  // optional bytes response = 3;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->response(), output);
  }

  // optional bytes notify = 4;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->notify(), output);
  }

  // optional .dcrpc.RpcMsg.Cookie cookie = 5;
  if (has_cookie()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cookie(), output);
  }

  // optional .dcrpc.RpcMsg.StatusCode status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dcrpc.RpcMsg)
}

::google::protobuf::uint8* RpcMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcrpc.RpcMsg)
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional bytes request = 2;
  if (has_request()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->request(), target);
  }

  // optional bytes response = 3;
  if (has_response()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->response(), target);
  }

  // optional bytes notify = 4;
  if (has_notify()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->notify(), target);
  }

  // optional .dcrpc.RpcMsg.Cookie cookie = 5;
  if (has_cookie()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cookie(), target);
  }

  // optional .dcrpc.RpcMsg.StatusCode status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcrpc.RpcMsg)
  return target;
}

int RpcMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional bytes request = 2;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request());
    }

    // optional bytes response = 3;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response());
    }

    // optional bytes notify = 4;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notify());
    }

    // optional .dcrpc.RpcMsg.Cookie cookie = 5;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cookie());
    }

    // optional .dcrpc.RpcMsg.StatusCode status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpcMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpcMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpcMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpcMsg::MergeFrom(const RpcMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_request()) {
      set_request(from.request());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_notify()) {
      set_notify(from.notify());
    }
    if (from.has_cookie()) {
      mutable_cookie()->::dcrpc::RpcMsg_Cookie::MergeFrom(from.cookie());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpcMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpcMsg::CopyFrom(const RpcMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RpcMsg::Swap(RpcMsg* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(request_, other->request_);
    std::swap(response_, other->response_);
    std::swap(notify_, other->notify_);
    std::swap(cookie_, other->cookie_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpcMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpcMsg_descriptor_;
  metadata.reflection = RpcMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dcrpc

// @@protoc_insertion_point(global_scope)
