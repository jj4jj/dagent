// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcrpc.proto

#ifndef PROTOBUF_dcrpc_2eproto__INCLUDED
#define PROTOBUF_dcrpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dcrpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dcrpc_2eproto();
void protobuf_AssignDesc_dcrpc_2eproto();
void protobuf_ShutdownFile_dcrpc_2eproto();

class RpcMsg;
class RpcMsg_Cookie;

enum RpcMsg_StatusCode {
  RpcMsg_StatusCode_RPC_STATUS_SUCCESS = 1,
  RpcMsg_StatusCode_RPC_STATUS_NOT_EXIST = 2
};
bool RpcMsg_StatusCode_IsValid(int value);
const RpcMsg_StatusCode RpcMsg_StatusCode_StatusCode_MIN = RpcMsg_StatusCode_RPC_STATUS_SUCCESS;
const RpcMsg_StatusCode RpcMsg_StatusCode_StatusCode_MAX = RpcMsg_StatusCode_RPC_STATUS_NOT_EXIST;
const int RpcMsg_StatusCode_StatusCode_ARRAYSIZE = RpcMsg_StatusCode_StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcMsg_StatusCode_descriptor();
inline const ::std::string& RpcMsg_StatusCode_Name(RpcMsg_StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcMsg_StatusCode_descriptor(), value);
}
inline bool RpcMsg_StatusCode_Parse(
    const ::std::string& name, RpcMsg_StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcMsg_StatusCode>(
    RpcMsg_StatusCode_descriptor(), name, value);
}
// ===================================================================

class RpcMsg_Cookie : public ::google::protobuf::Message {
 public:
  RpcMsg_Cookie();
  virtual ~RpcMsg_Cookie();

  RpcMsg_Cookie(const RpcMsg_Cookie& from);

  inline RpcMsg_Cookie& operator=(const RpcMsg_Cookie& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMsg_Cookie& default_instance();

  void Swap(RpcMsg_Cookie* other);

  // implements Message ----------------------------------------------

  RpcMsg_Cookie* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMsg_Cookie& from);
  void MergeFrom(const RpcMsg_Cookie& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 transaction = 1;
  inline bool has_transaction() const;
  inline void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  inline ::google::protobuf::uint64 transaction() const;
  inline void set_transaction(::google::protobuf::uint64 value);

  // optional bytes cookie = 2;
  inline bool has_cookie() const;
  inline void clear_cookie();
  static const int kCookieFieldNumber = 2;
  inline const ::std::string& cookie() const;
  inline void set_cookie(const ::std::string& value);
  inline void set_cookie(const char* value);
  inline void set_cookie(const void* value, size_t size);
  inline ::std::string* mutable_cookie();
  inline ::std::string* release_cookie();
  inline void set_allocated_cookie(::std::string* cookie);

  // @@protoc_insertion_point(class_scope:dcrpc.RpcMsg.Cookie)
 private:
  inline void set_has_transaction();
  inline void clear_has_transaction();
  inline void set_has_cookie();
  inline void clear_has_cookie();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 transaction_;
  ::std::string* cookie_;
  friend void  protobuf_AddDesc_dcrpc_2eproto();
  friend void protobuf_AssignDesc_dcrpc_2eproto();
  friend void protobuf_ShutdownFile_dcrpc_2eproto();

  void InitAsDefaultInstance();
  static RpcMsg_Cookie* default_instance_;
};
// -------------------------------------------------------------------

class RpcMsg : public ::google::protobuf::Message {
 public:
  RpcMsg();
  virtual ~RpcMsg();

  RpcMsg(const RpcMsg& from);

  inline RpcMsg& operator=(const RpcMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMsg& default_instance();

  void Swap(RpcMsg* other);

  // implements Message ----------------------------------------------

  RpcMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMsg& from);
  void MergeFrom(const RpcMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RpcMsg_Cookie Cookie;

  typedef RpcMsg_StatusCode StatusCode;
  static const StatusCode RPC_STATUS_SUCCESS = RpcMsg_StatusCode_RPC_STATUS_SUCCESS;
  static const StatusCode RPC_STATUS_NOT_EXIST = RpcMsg_StatusCode_RPC_STATUS_NOT_EXIST;
  static inline bool StatusCode_IsValid(int value) {
    return RpcMsg_StatusCode_IsValid(value);
  }
  static const StatusCode StatusCode_MIN =
    RpcMsg_StatusCode_StatusCode_MIN;
  static const StatusCode StatusCode_MAX =
    RpcMsg_StatusCode_StatusCode_MAX;
  static const int StatusCode_ARRAYSIZE =
    RpcMsg_StatusCode_StatusCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StatusCode_descriptor() {
    return RpcMsg_StatusCode_descriptor();
  }
  static inline const ::std::string& StatusCode_Name(StatusCode value) {
    return RpcMsg_StatusCode_Name(value);
  }
  static inline bool StatusCode_Parse(const ::std::string& name,
      StatusCode* value) {
    return RpcMsg_StatusCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional bytes request = 2;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 2;
  inline const ::std::string& request() const;
  inline void set_request(const ::std::string& value);
  inline void set_request(const char* value);
  inline void set_request(const void* value, size_t size);
  inline ::std::string* mutable_request();
  inline ::std::string* release_request();
  inline void set_allocated_request(::std::string* request);

  // optional bytes response = 3;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 3;
  inline const ::std::string& response() const;
  inline void set_response(const ::std::string& value);
  inline void set_response(const char* value);
  inline void set_response(const void* value, size_t size);
  inline ::std::string* mutable_response();
  inline ::std::string* release_response();
  inline void set_allocated_response(::std::string* response);

  // optional bytes notify = 4;
  inline bool has_notify() const;
  inline void clear_notify();
  static const int kNotifyFieldNumber = 4;
  inline const ::std::string& notify() const;
  inline void set_notify(const ::std::string& value);
  inline void set_notify(const char* value);
  inline void set_notify(const void* value, size_t size);
  inline ::std::string* mutable_notify();
  inline ::std::string* release_notify();
  inline void set_allocated_notify(::std::string* notify);

  // optional .dcrpc.RpcMsg.Cookie cookie = 5;
  inline bool has_cookie() const;
  inline void clear_cookie();
  static const int kCookieFieldNumber = 5;
  inline const ::dcrpc::RpcMsg_Cookie& cookie() const;
  inline ::dcrpc::RpcMsg_Cookie* mutable_cookie();
  inline ::dcrpc::RpcMsg_Cookie* release_cookie();
  inline void set_allocated_cookie(::dcrpc::RpcMsg_Cookie* cookie);

  // optional .dcrpc.RpcMsg.StatusCode status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::dcrpc::RpcMsg_StatusCode status() const;
  inline void set_status(::dcrpc::RpcMsg_StatusCode value);

  // @@protoc_insertion_point(class_scope:dcrpc.RpcMsg)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_notify();
  inline void clear_has_notify();
  inline void set_has_cookie();
  inline void clear_has_cookie();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::std::string* request_;
  ::std::string* response_;
  ::std::string* notify_;
  ::dcrpc::RpcMsg_Cookie* cookie_;
  int status_;
  friend void  protobuf_AddDesc_dcrpc_2eproto();
  friend void protobuf_AssignDesc_dcrpc_2eproto();
  friend void protobuf_ShutdownFile_dcrpc_2eproto();

  void InitAsDefaultInstance();
  static RpcMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcMsg_Cookie

// optional uint64 transaction = 1;
inline bool RpcMsg_Cookie::has_transaction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMsg_Cookie::set_has_transaction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMsg_Cookie::clear_has_transaction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMsg_Cookie::clear_transaction() {
  transaction_ = GOOGLE_ULONGLONG(0);
  clear_has_transaction();
}
inline ::google::protobuf::uint64 RpcMsg_Cookie::transaction() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.Cookie.transaction)
  return transaction_;
}
inline void RpcMsg_Cookie::set_transaction(::google::protobuf::uint64 value) {
  set_has_transaction();
  transaction_ = value;
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.Cookie.transaction)
}

// optional bytes cookie = 2;
inline bool RpcMsg_Cookie::has_cookie() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMsg_Cookie::set_has_cookie() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMsg_Cookie::clear_has_cookie() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMsg_Cookie::clear_cookie() {
  if (cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_->clear();
  }
  clear_has_cookie();
}
inline const ::std::string& RpcMsg_Cookie::cookie() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.Cookie.cookie)
  return *cookie_;
}
inline void RpcMsg_Cookie::set_cookie(const ::std::string& value) {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_ = new ::std::string;
  }
  cookie_->assign(value);
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.Cookie.cookie)
}
inline void RpcMsg_Cookie::set_cookie(const char* value) {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_ = new ::std::string;
  }
  cookie_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcrpc.RpcMsg.Cookie.cookie)
}
inline void RpcMsg_Cookie::set_cookie(const void* value, size_t size) {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_ = new ::std::string;
  }
  cookie_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcrpc.RpcMsg.Cookie.cookie)
}
inline ::std::string* RpcMsg_Cookie::mutable_cookie() {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.Cookie.cookie)
  return cookie_;
}
inline ::std::string* RpcMsg_Cookie::release_cookie() {
  clear_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cookie_;
    cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMsg_Cookie::set_allocated_cookie(::std::string* cookie) {
  if (cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cookie_;
  }
  if (cookie) {
    set_has_cookie();
    cookie_ = cookie;
  } else {
    clear_has_cookie();
    cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.Cookie.cookie)
}

// -------------------------------------------------------------------

// RpcMsg

// required string path = 1;
inline bool RpcMsg::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMsg::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMsg::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMsg::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& RpcMsg::path() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.path)
  return *path_;
}
inline void RpcMsg::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.path)
}
inline void RpcMsg::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcrpc.RpcMsg.path)
}
inline void RpcMsg::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcrpc.RpcMsg.path)
}
inline ::std::string* RpcMsg::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.path)
  return path_;
}
inline ::std::string* RpcMsg::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMsg::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.path)
}

// optional bytes request = 2;
inline bool RpcMsg::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMsg::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMsg::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMsg::clear_request() {
  if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_->clear();
  }
  clear_has_request();
}
inline const ::std::string& RpcMsg::request() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.request)
  return *request_;
}
inline void RpcMsg::set_request(const ::std::string& value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_ = new ::std::string;
  }
  request_->assign(value);
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.request)
}
inline void RpcMsg::set_request(const char* value) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_ = new ::std::string;
  }
  request_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcrpc.RpcMsg.request)
}
inline void RpcMsg::set_request(const void* value, size_t size) {
  set_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_ = new ::std::string;
  }
  request_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcrpc.RpcMsg.request)
}
inline ::std::string* RpcMsg::mutable_request() {
  set_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    request_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.request)
  return request_;
}
inline ::std::string* RpcMsg::release_request() {
  clear_has_request();
  if (request_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = request_;
    request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMsg::set_allocated_request(::std::string* request) {
  if (request_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete request_;
  }
  if (request) {
    set_has_request();
    request_ = request;
  } else {
    clear_has_request();
    request_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.request)
}

// optional bytes response = 3;
inline bool RpcMsg::has_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMsg::set_has_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcMsg::clear_has_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcMsg::clear_response() {
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_->clear();
  }
  clear_has_response();
}
inline const ::std::string& RpcMsg::response() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.response)
  return *response_;
}
inline void RpcMsg::set_response(const ::std::string& value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  response_->assign(value);
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.response)
}
inline void RpcMsg::set_response(const char* value) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  response_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcrpc.RpcMsg.response)
}
inline void RpcMsg::set_response(const void* value, size_t size) {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  response_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcrpc.RpcMsg.response)
}
inline ::std::string* RpcMsg::mutable_response() {
  set_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    response_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.response)
  return response_;
}
inline ::std::string* RpcMsg::release_response() {
  clear_has_response();
  if (response_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = response_;
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMsg::set_allocated_response(::std::string* response) {
  if (response_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete response_;
  }
  if (response) {
    set_has_response();
    response_ = response;
  } else {
    clear_has_response();
    response_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.response)
}

// optional bytes notify = 4;
inline bool RpcMsg::has_notify() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcMsg::set_has_notify() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcMsg::clear_has_notify() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcMsg::clear_notify() {
  if (notify_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notify_->clear();
  }
  clear_has_notify();
}
inline const ::std::string& RpcMsg::notify() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.notify)
  return *notify_;
}
inline void RpcMsg::set_notify(const ::std::string& value) {
  set_has_notify();
  if (notify_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notify_ = new ::std::string;
  }
  notify_->assign(value);
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.notify)
}
inline void RpcMsg::set_notify(const char* value) {
  set_has_notify();
  if (notify_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notify_ = new ::std::string;
  }
  notify_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcrpc.RpcMsg.notify)
}
inline void RpcMsg::set_notify(const void* value, size_t size) {
  set_has_notify();
  if (notify_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notify_ = new ::std::string;
  }
  notify_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcrpc.RpcMsg.notify)
}
inline ::std::string* RpcMsg::mutable_notify() {
  set_has_notify();
  if (notify_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notify_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.notify)
  return notify_;
}
inline ::std::string* RpcMsg::release_notify() {
  clear_has_notify();
  if (notify_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notify_;
    notify_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMsg::set_allocated_notify(::std::string* notify) {
  if (notify_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notify_;
  }
  if (notify) {
    set_has_notify();
    notify_ = notify;
  } else {
    clear_has_notify();
    notify_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.notify)
}

// optional .dcrpc.RpcMsg.Cookie cookie = 5;
inline bool RpcMsg::has_cookie() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcMsg::set_has_cookie() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcMsg::clear_has_cookie() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcMsg::clear_cookie() {
  if (cookie_ != NULL) cookie_->::dcrpc::RpcMsg_Cookie::Clear();
  clear_has_cookie();
}
inline const ::dcrpc::RpcMsg_Cookie& RpcMsg::cookie() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.cookie)
  return cookie_ != NULL ? *cookie_ : *default_instance_->cookie_;
}
inline ::dcrpc::RpcMsg_Cookie* RpcMsg::mutable_cookie() {
  set_has_cookie();
  if (cookie_ == NULL) cookie_ = new ::dcrpc::RpcMsg_Cookie;
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.cookie)
  return cookie_;
}
inline ::dcrpc::RpcMsg_Cookie* RpcMsg::release_cookie() {
  clear_has_cookie();
  ::dcrpc::RpcMsg_Cookie* temp = cookie_;
  cookie_ = NULL;
  return temp;
}
inline void RpcMsg::set_allocated_cookie(::dcrpc::RpcMsg_Cookie* cookie) {
  delete cookie_;
  cookie_ = cookie;
  if (cookie) {
    set_has_cookie();
  } else {
    clear_has_cookie();
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.cookie)
}

// optional .dcrpc.RpcMsg.StatusCode status = 6;
inline bool RpcMsg::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpcMsg::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RpcMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RpcMsg::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::dcrpc::RpcMsg_StatusCode RpcMsg::status() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.status)
  return static_cast< ::dcrpc::RpcMsg_StatusCode >(status_);
}
inline void RpcMsg::set_status(::dcrpc::RpcMsg_StatusCode value) {
  assert(::dcrpc::RpcMsg_StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.status)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dcrpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dcrpc::RpcMsg_StatusCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcrpc::RpcMsg_StatusCode>() {
  return ::dcrpc::RpcMsg_StatusCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dcrpc_2eproto__INCLUDED
