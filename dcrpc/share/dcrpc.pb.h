// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcrpc.proto

#ifndef PROTOBUF_dcrpc_2eproto__INCLUDED
#define PROTOBUF_dcrpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dcrpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dcrpc_2eproto();
void protobuf_AssignDesc_dcrpc_2eproto();
void protobuf_ShutdownFile_dcrpc_2eproto();

class RpcMsg;
class RpcMsg_Cookie;
class RpcMsg_ValueItem;
class RpcMsg_Request;
class RpcMsg_Response;
class RpcMsg_Notify;

enum RpcMsg_StatusCode {
  RpcMsg_StatusCode_RPC_STATUS_SUCCESS = 1,
  RpcMsg_StatusCode_RPC_STATUS_NOT_EXIST = 2,
  RpcMsg_StatusCode_RPC_STATUS_MATCH_FAIL = 3
};
bool RpcMsg_StatusCode_IsValid(int value);
const RpcMsg_StatusCode RpcMsg_StatusCode_StatusCode_MIN = RpcMsg_StatusCode_RPC_STATUS_SUCCESS;
const RpcMsg_StatusCode RpcMsg_StatusCode_StatusCode_MAX = RpcMsg_StatusCode_RPC_STATUS_MATCH_FAIL;
const int RpcMsg_StatusCode_StatusCode_ARRAYSIZE = RpcMsg_StatusCode_StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RpcMsg_StatusCode_descriptor();
inline const ::std::string& RpcMsg_StatusCode_Name(RpcMsg_StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RpcMsg_StatusCode_descriptor(), value);
}
inline bool RpcMsg_StatusCode_Parse(
    const ::std::string& name, RpcMsg_StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RpcMsg_StatusCode>(
    RpcMsg_StatusCode_descriptor(), name, value);
}
// ===================================================================

class RpcMsg_Cookie : public ::google::protobuf::Message {
 public:
  RpcMsg_Cookie();
  virtual ~RpcMsg_Cookie();

  RpcMsg_Cookie(const RpcMsg_Cookie& from);

  inline RpcMsg_Cookie& operator=(const RpcMsg_Cookie& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMsg_Cookie& default_instance();

  void Swap(RpcMsg_Cookie* other);

  // implements Message ----------------------------------------------

  RpcMsg_Cookie* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMsg_Cookie& from);
  void MergeFrom(const RpcMsg_Cookie& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 transaction = 1;
  inline bool has_transaction() const;
  inline void clear_transaction();
  static const int kTransactionFieldNumber = 1;
  inline ::google::protobuf::uint64 transaction() const;
  inline void set_transaction(::google::protobuf::uint64 value);

  // optional bytes cookie = 2;
  inline bool has_cookie() const;
  inline void clear_cookie();
  static const int kCookieFieldNumber = 2;
  inline const ::std::string& cookie() const;
  inline void set_cookie(const ::std::string& value);
  inline void set_cookie(const char* value);
  inline void set_cookie(const void* value, size_t size);
  inline ::std::string* mutable_cookie();
  inline ::std::string* release_cookie();
  inline void set_allocated_cookie(::std::string* cookie);

  // @@protoc_insertion_point(class_scope:dcrpc.RpcMsg.Cookie)
 private:
  inline void set_has_transaction();
  inline void clear_has_transaction();
  inline void set_has_cookie();
  inline void clear_has_cookie();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 transaction_;
  ::std::string* cookie_;
  friend void  protobuf_AddDesc_dcrpc_2eproto();
  friend void protobuf_AssignDesc_dcrpc_2eproto();
  friend void protobuf_ShutdownFile_dcrpc_2eproto();

  void InitAsDefaultInstance();
  static RpcMsg_Cookie* default_instance_;
};
// -------------------------------------------------------------------

class RpcMsg_ValueItem : public ::google::protobuf::Message {
 public:
  RpcMsg_ValueItem();
  virtual ~RpcMsg_ValueItem();

  RpcMsg_ValueItem(const RpcMsg_ValueItem& from);

  inline RpcMsg_ValueItem& operator=(const RpcMsg_ValueItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMsg_ValueItem& default_instance();

  void Swap(RpcMsg_ValueItem* other);

  // implements Message ----------------------------------------------

  RpcMsg_ValueItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMsg_ValueItem& from);
  void MergeFrom(const RpcMsg_ValueItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 i = 2;
  inline bool has_i() const;
  inline void clear_i();
  static const int kIFieldNumber = 2;
  inline ::google::protobuf::int64 i() const;
  inline void set_i(::google::protobuf::int64 value);

  // optional double f = 3;
  inline bool has_f() const;
  inline void clear_f();
  static const int kFFieldNumber = 3;
  inline double f() const;
  inline void set_f(double value);

  // optional string s = 4;
  inline bool has_s() const;
  inline void clear_s();
  static const int kSFieldNumber = 4;
  inline const ::std::string& s() const;
  inline void set_s(const ::std::string& value);
  inline void set_s(const char* value);
  inline void set_s(const char* value, size_t size);
  inline ::std::string* mutable_s();
  inline ::std::string* release_s();
  inline void set_allocated_s(::std::string* s);

  // optional bytes b = 5;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 5;
  inline const ::std::string& b() const;
  inline void set_b(const ::std::string& value);
  inline void set_b(const char* value);
  inline void set_b(const void* value, size_t size);
  inline ::std::string* mutable_b();
  inline ::std::string* release_b();
  inline void set_allocated_b(::std::string* b);

  // @@protoc_insertion_point(class_scope:dcrpc.RpcMsg.ValueItem)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_i();
  inline void clear_has_i();
  inline void set_has_f();
  inline void clear_has_f();
  inline void set_has_s();
  inline void clear_has_s();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int64 i_;
  double f_;
  ::std::string* s_;
  ::std::string* b_;
  friend void  protobuf_AddDesc_dcrpc_2eproto();
  friend void protobuf_AssignDesc_dcrpc_2eproto();
  friend void protobuf_ShutdownFile_dcrpc_2eproto();

  void InitAsDefaultInstance();
  static RpcMsg_ValueItem* default_instance_;
};
// -------------------------------------------------------------------

class RpcMsg_Request : public ::google::protobuf::Message {
 public:
  RpcMsg_Request();
  virtual ~RpcMsg_Request();

  RpcMsg_Request(const RpcMsg_Request& from);

  inline RpcMsg_Request& operator=(const RpcMsg_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMsg_Request& default_instance();

  void Swap(RpcMsg_Request* other);

  // implements Message ----------------------------------------------

  RpcMsg_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMsg_Request& from);
  void MergeFrom(const RpcMsg_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dcrpc.RpcMsg.ValueItem args = 1;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 1;
  inline const ::dcrpc::RpcMsg_ValueItem& args(int index) const;
  inline ::dcrpc::RpcMsg_ValueItem* mutable_args(int index);
  inline ::dcrpc::RpcMsg_ValueItem* add_args();
  inline const ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem >&
      args() const;
  inline ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem >*
      mutable_args();

  // @@protoc_insertion_point(class_scope:dcrpc.RpcMsg.Request)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem > args_;
  friend void  protobuf_AddDesc_dcrpc_2eproto();
  friend void protobuf_AssignDesc_dcrpc_2eproto();
  friend void protobuf_ShutdownFile_dcrpc_2eproto();

  void InitAsDefaultInstance();
  static RpcMsg_Request* default_instance_;
};
// -------------------------------------------------------------------

class RpcMsg_Response : public ::google::protobuf::Message {
 public:
  RpcMsg_Response();
  virtual ~RpcMsg_Response();

  RpcMsg_Response(const RpcMsg_Response& from);

  inline RpcMsg_Response& operator=(const RpcMsg_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMsg_Response& default_instance();

  void Swap(RpcMsg_Response* other);

  // implements Message ----------------------------------------------

  RpcMsg_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMsg_Response& from);
  void MergeFrom(const RpcMsg_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // repeated .dcrpc.RpcMsg.ValueItem result = 2;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::dcrpc::RpcMsg_ValueItem& result(int index) const;
  inline ::dcrpc::RpcMsg_ValueItem* mutable_result(int index);
  inline ::dcrpc::RpcMsg_ValueItem* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem >*
      mutable_result();

  // optional string error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  inline void set_allocated_error(::std::string* error);

  // @@protoc_insertion_point(class_scope:dcrpc.RpcMsg.Response)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem > result_;
  ::std::string* error_;
  ::google::protobuf::int32 status_;
  friend void  protobuf_AddDesc_dcrpc_2eproto();
  friend void protobuf_AssignDesc_dcrpc_2eproto();
  friend void protobuf_ShutdownFile_dcrpc_2eproto();

  void InitAsDefaultInstance();
  static RpcMsg_Response* default_instance_;
};
// -------------------------------------------------------------------

class RpcMsg_Notify : public ::google::protobuf::Message {
 public:
  RpcMsg_Notify();
  virtual ~RpcMsg_Notify();

  RpcMsg_Notify(const RpcMsg_Notify& from);

  inline RpcMsg_Notify& operator=(const RpcMsg_Notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMsg_Notify& default_instance();

  void Swap(RpcMsg_Notify* other);

  // implements Message ----------------------------------------------

  RpcMsg_Notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMsg_Notify& from);
  void MergeFrom(const RpcMsg_Notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dcrpc.RpcMsg.ValueItem result = 1;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::dcrpc::RpcMsg_ValueItem& result(int index) const;
  inline ::dcrpc::RpcMsg_ValueItem* mutable_result(int index);
  inline ::dcrpc::RpcMsg_ValueItem* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem >*
      mutable_result();

  // @@protoc_insertion_point(class_scope:dcrpc.RpcMsg.Notify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem > result_;
  friend void  protobuf_AddDesc_dcrpc_2eproto();
  friend void protobuf_AssignDesc_dcrpc_2eproto();
  friend void protobuf_ShutdownFile_dcrpc_2eproto();

  void InitAsDefaultInstance();
  static RpcMsg_Notify* default_instance_;
};
// -------------------------------------------------------------------

class RpcMsg : public ::google::protobuf::Message {
 public:
  RpcMsg();
  virtual ~RpcMsg();

  RpcMsg(const RpcMsg& from);

  inline RpcMsg& operator=(const RpcMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcMsg& default_instance();

  void Swap(RpcMsg* other);

  // implements Message ----------------------------------------------

  RpcMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcMsg& from);
  void MergeFrom(const RpcMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RpcMsg_Cookie Cookie;
  typedef RpcMsg_ValueItem ValueItem;
  typedef RpcMsg_Request Request;
  typedef RpcMsg_Response Response;
  typedef RpcMsg_Notify Notify;

  typedef RpcMsg_StatusCode StatusCode;
  static const StatusCode RPC_STATUS_SUCCESS = RpcMsg_StatusCode_RPC_STATUS_SUCCESS;
  static const StatusCode RPC_STATUS_NOT_EXIST = RpcMsg_StatusCode_RPC_STATUS_NOT_EXIST;
  static const StatusCode RPC_STATUS_MATCH_FAIL = RpcMsg_StatusCode_RPC_STATUS_MATCH_FAIL;
  static inline bool StatusCode_IsValid(int value) {
    return RpcMsg_StatusCode_IsValid(value);
  }
  static const StatusCode StatusCode_MIN =
    RpcMsg_StatusCode_StatusCode_MIN;
  static const StatusCode StatusCode_MAX =
    RpcMsg_StatusCode_StatusCode_MAX;
  static const int StatusCode_ARRAYSIZE =
    RpcMsg_StatusCode_StatusCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  StatusCode_descriptor() {
    return RpcMsg_StatusCode_descriptor();
  }
  static inline const ::std::string& StatusCode_Name(StatusCode value) {
    return RpcMsg_StatusCode_Name(value);
  }
  static inline bool StatusCode_Parse(const ::std::string& name,
      StatusCode* value) {
    return RpcMsg_StatusCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional .dcrpc.RpcMsg.Request request = 2;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 2;
  inline const ::dcrpc::RpcMsg_Request& request() const;
  inline ::dcrpc::RpcMsg_Request* mutable_request();
  inline ::dcrpc::RpcMsg_Request* release_request();
  inline void set_allocated_request(::dcrpc::RpcMsg_Request* request);

  // optional .dcrpc.RpcMsg.Response response = 3;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 3;
  inline const ::dcrpc::RpcMsg_Response& response() const;
  inline ::dcrpc::RpcMsg_Response* mutable_response();
  inline ::dcrpc::RpcMsg_Response* release_response();
  inline void set_allocated_response(::dcrpc::RpcMsg_Response* response);

  // optional .dcrpc.RpcMsg.Notify notify = 4;
  inline bool has_notify() const;
  inline void clear_notify();
  static const int kNotifyFieldNumber = 4;
  inline const ::dcrpc::RpcMsg_Notify& notify() const;
  inline ::dcrpc::RpcMsg_Notify* mutable_notify();
  inline ::dcrpc::RpcMsg_Notify* release_notify();
  inline void set_allocated_notify(::dcrpc::RpcMsg_Notify* notify);

  // optional .dcrpc.RpcMsg.Cookie cookie = 5;
  inline bool has_cookie() const;
  inline void clear_cookie();
  static const int kCookieFieldNumber = 5;
  inline const ::dcrpc::RpcMsg_Cookie& cookie() const;
  inline ::dcrpc::RpcMsg_Cookie* mutable_cookie();
  inline ::dcrpc::RpcMsg_Cookie* release_cookie();
  inline void set_allocated_cookie(::dcrpc::RpcMsg_Cookie* cookie);

  // optional .dcrpc.RpcMsg.StatusCode status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::dcrpc::RpcMsg_StatusCode status() const;
  inline void set_status(::dcrpc::RpcMsg_StatusCode value);

  // @@protoc_insertion_point(class_scope:dcrpc.RpcMsg)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();
  inline void set_has_notify();
  inline void clear_has_notify();
  inline void set_has_cookie();
  inline void clear_has_cookie();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::dcrpc::RpcMsg_Request* request_;
  ::dcrpc::RpcMsg_Response* response_;
  ::dcrpc::RpcMsg_Notify* notify_;
  ::dcrpc::RpcMsg_Cookie* cookie_;
  int status_;
  friend void  protobuf_AddDesc_dcrpc_2eproto();
  friend void protobuf_AssignDesc_dcrpc_2eproto();
  friend void protobuf_ShutdownFile_dcrpc_2eproto();

  void InitAsDefaultInstance();
  static RpcMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcMsg_Cookie

// optional uint64 transaction = 1;
inline bool RpcMsg_Cookie::has_transaction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMsg_Cookie::set_has_transaction() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMsg_Cookie::clear_has_transaction() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMsg_Cookie::clear_transaction() {
  transaction_ = GOOGLE_ULONGLONG(0);
  clear_has_transaction();
}
inline ::google::protobuf::uint64 RpcMsg_Cookie::transaction() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.Cookie.transaction)
  return transaction_;
}
inline void RpcMsg_Cookie::set_transaction(::google::protobuf::uint64 value) {
  set_has_transaction();
  transaction_ = value;
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.Cookie.transaction)
}

// optional bytes cookie = 2;
inline bool RpcMsg_Cookie::has_cookie() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMsg_Cookie::set_has_cookie() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMsg_Cookie::clear_has_cookie() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMsg_Cookie::clear_cookie() {
  if (cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_->clear();
  }
  clear_has_cookie();
}
inline const ::std::string& RpcMsg_Cookie::cookie() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.Cookie.cookie)
  return *cookie_;
}
inline void RpcMsg_Cookie::set_cookie(const ::std::string& value) {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_ = new ::std::string;
  }
  cookie_->assign(value);
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.Cookie.cookie)
}
inline void RpcMsg_Cookie::set_cookie(const char* value) {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_ = new ::std::string;
  }
  cookie_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcrpc.RpcMsg.Cookie.cookie)
}
inline void RpcMsg_Cookie::set_cookie(const void* value, size_t size) {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_ = new ::std::string;
  }
  cookie_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcrpc.RpcMsg.Cookie.cookie)
}
inline ::std::string* RpcMsg_Cookie::mutable_cookie() {
  set_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cookie_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.Cookie.cookie)
  return cookie_;
}
inline ::std::string* RpcMsg_Cookie::release_cookie() {
  clear_has_cookie();
  if (cookie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cookie_;
    cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMsg_Cookie::set_allocated_cookie(::std::string* cookie) {
  if (cookie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cookie_;
  }
  if (cookie) {
    set_has_cookie();
    cookie_ = cookie;
  } else {
    clear_has_cookie();
    cookie_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.Cookie.cookie)
}

// -------------------------------------------------------------------

// RpcMsg_ValueItem

// optional string name = 1;
inline bool RpcMsg_ValueItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMsg_ValueItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMsg_ValueItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMsg_ValueItem::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RpcMsg_ValueItem::name() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.ValueItem.name)
  return *name_;
}
inline void RpcMsg_ValueItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.ValueItem.name)
}
inline void RpcMsg_ValueItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcrpc.RpcMsg.ValueItem.name)
}
inline void RpcMsg_ValueItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcrpc.RpcMsg.ValueItem.name)
}
inline ::std::string* RpcMsg_ValueItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.ValueItem.name)
  return name_;
}
inline ::std::string* RpcMsg_ValueItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMsg_ValueItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.ValueItem.name)
}

// optional int64 i = 2;
inline bool RpcMsg_ValueItem::has_i() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMsg_ValueItem::set_has_i() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMsg_ValueItem::clear_has_i() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMsg_ValueItem::clear_i() {
  i_ = GOOGLE_LONGLONG(0);
  clear_has_i();
}
inline ::google::protobuf::int64 RpcMsg_ValueItem::i() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.ValueItem.i)
  return i_;
}
inline void RpcMsg_ValueItem::set_i(::google::protobuf::int64 value) {
  set_has_i();
  i_ = value;
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.ValueItem.i)
}

// optional double f = 3;
inline bool RpcMsg_ValueItem::has_f() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMsg_ValueItem::set_has_f() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcMsg_ValueItem::clear_has_f() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcMsg_ValueItem::clear_f() {
  f_ = 0;
  clear_has_f();
}
inline double RpcMsg_ValueItem::f() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.ValueItem.f)
  return f_;
}
inline void RpcMsg_ValueItem::set_f(double value) {
  set_has_f();
  f_ = value;
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.ValueItem.f)
}

// optional string s = 4;
inline bool RpcMsg_ValueItem::has_s() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcMsg_ValueItem::set_has_s() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcMsg_ValueItem::clear_has_s() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcMsg_ValueItem::clear_s() {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_->clear();
  }
  clear_has_s();
}
inline const ::std::string& RpcMsg_ValueItem::s() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.ValueItem.s)
  return *s_;
}
inline void RpcMsg_ValueItem::set_s(const ::std::string& value) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_ = new ::std::string;
  }
  s_->assign(value);
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.ValueItem.s)
}
inline void RpcMsg_ValueItem::set_s(const char* value) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_ = new ::std::string;
  }
  s_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcrpc.RpcMsg.ValueItem.s)
}
inline void RpcMsg_ValueItem::set_s(const char* value, size_t size) {
  set_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_ = new ::std::string;
  }
  s_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcrpc.RpcMsg.ValueItem.s)
}
inline ::std::string* RpcMsg_ValueItem::mutable_s() {
  set_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    s_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.ValueItem.s)
  return s_;
}
inline ::std::string* RpcMsg_ValueItem::release_s() {
  clear_has_s();
  if (s_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = s_;
    s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMsg_ValueItem::set_allocated_s(::std::string* s) {
  if (s_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete s_;
  }
  if (s) {
    set_has_s();
    s_ = s;
  } else {
    clear_has_s();
    s_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.ValueItem.s)
}

// optional bytes b = 5;
inline bool RpcMsg_ValueItem::has_b() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcMsg_ValueItem::set_has_b() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcMsg_ValueItem::clear_has_b() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcMsg_ValueItem::clear_b() {
  if (b_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    b_->clear();
  }
  clear_has_b();
}
inline const ::std::string& RpcMsg_ValueItem::b() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.ValueItem.b)
  return *b_;
}
inline void RpcMsg_ValueItem::set_b(const ::std::string& value) {
  set_has_b();
  if (b_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    b_ = new ::std::string;
  }
  b_->assign(value);
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.ValueItem.b)
}
inline void RpcMsg_ValueItem::set_b(const char* value) {
  set_has_b();
  if (b_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    b_ = new ::std::string;
  }
  b_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcrpc.RpcMsg.ValueItem.b)
}
inline void RpcMsg_ValueItem::set_b(const void* value, size_t size) {
  set_has_b();
  if (b_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    b_ = new ::std::string;
  }
  b_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcrpc.RpcMsg.ValueItem.b)
}
inline ::std::string* RpcMsg_ValueItem::mutable_b() {
  set_has_b();
  if (b_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    b_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.ValueItem.b)
  return b_;
}
inline ::std::string* RpcMsg_ValueItem::release_b() {
  clear_has_b();
  if (b_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = b_;
    b_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMsg_ValueItem::set_allocated_b(::std::string* b) {
  if (b_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete b_;
  }
  if (b) {
    set_has_b();
    b_ = b;
  } else {
    clear_has_b();
    b_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.ValueItem.b)
}

// -------------------------------------------------------------------

// RpcMsg_Request

// repeated .dcrpc.RpcMsg.ValueItem args = 1;
inline int RpcMsg_Request::args_size() const {
  return args_.size();
}
inline void RpcMsg_Request::clear_args() {
  args_.Clear();
}
inline const ::dcrpc::RpcMsg_ValueItem& RpcMsg_Request::args(int index) const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.Request.args)
  return args_.Get(index);
}
inline ::dcrpc::RpcMsg_ValueItem* RpcMsg_Request::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.Request.args)
  return args_.Mutable(index);
}
inline ::dcrpc::RpcMsg_ValueItem* RpcMsg_Request::add_args() {
  // @@protoc_insertion_point(field_add:dcrpc.RpcMsg.Request.args)
  return args_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem >&
RpcMsg_Request::args() const {
  // @@protoc_insertion_point(field_list:dcrpc.RpcMsg.Request.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem >*
RpcMsg_Request::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:dcrpc.RpcMsg.Request.args)
  return &args_;
}

// -------------------------------------------------------------------

// RpcMsg_Response

// required int32 status = 1;
inline bool RpcMsg_Response::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMsg_Response::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMsg_Response::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMsg_Response::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 RpcMsg_Response::status() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.Response.status)
  return status_;
}
inline void RpcMsg_Response::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.Response.status)
}

// repeated .dcrpc.RpcMsg.ValueItem result = 2;
inline int RpcMsg_Response::result_size() const {
  return result_.size();
}
inline void RpcMsg_Response::clear_result() {
  result_.Clear();
}
inline const ::dcrpc::RpcMsg_ValueItem& RpcMsg_Response::result(int index) const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.Response.result)
  return result_.Get(index);
}
inline ::dcrpc::RpcMsg_ValueItem* RpcMsg_Response::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.Response.result)
  return result_.Mutable(index);
}
inline ::dcrpc::RpcMsg_ValueItem* RpcMsg_Response::add_result() {
  // @@protoc_insertion_point(field_add:dcrpc.RpcMsg.Response.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem >&
RpcMsg_Response::result() const {
  // @@protoc_insertion_point(field_list:dcrpc.RpcMsg.Response.result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem >*
RpcMsg_Response::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:dcrpc.RpcMsg.Response.result)
  return &result_;
}

// optional string error = 3;
inline bool RpcMsg_Response::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMsg_Response::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcMsg_Response::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcMsg_Response::clear_error() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& RpcMsg_Response::error() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.Response.error)
  return *error_;
}
inline void RpcMsg_Response::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.Response.error)
}
inline void RpcMsg_Response::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcrpc.RpcMsg.Response.error)
}
inline void RpcMsg_Response::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcrpc.RpcMsg.Response.error)
}
inline ::std::string* RpcMsg_Response::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    error_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.Response.error)
  return error_;
}
inline ::std::string* RpcMsg_Response::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMsg_Response::set_allocated_error(::std::string* error) {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (error) {
    set_has_error();
    error_ = error;
  } else {
    clear_has_error();
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.Response.error)
}

// -------------------------------------------------------------------

// RpcMsg_Notify

// repeated .dcrpc.RpcMsg.ValueItem result = 1;
inline int RpcMsg_Notify::result_size() const {
  return result_.size();
}
inline void RpcMsg_Notify::clear_result() {
  result_.Clear();
}
inline const ::dcrpc::RpcMsg_ValueItem& RpcMsg_Notify::result(int index) const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.Notify.result)
  return result_.Get(index);
}
inline ::dcrpc::RpcMsg_ValueItem* RpcMsg_Notify::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.Notify.result)
  return result_.Mutable(index);
}
inline ::dcrpc::RpcMsg_ValueItem* RpcMsg_Notify::add_result() {
  // @@protoc_insertion_point(field_add:dcrpc.RpcMsg.Notify.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem >&
RpcMsg_Notify::result() const {
  // @@protoc_insertion_point(field_list:dcrpc.RpcMsg.Notify.result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::dcrpc::RpcMsg_ValueItem >*
RpcMsg_Notify::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:dcrpc.RpcMsg.Notify.result)
  return &result_;
}

// -------------------------------------------------------------------

// RpcMsg

// required string path = 1;
inline bool RpcMsg::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMsg::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcMsg::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcMsg::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& RpcMsg::path() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.path)
  return *path_;
}
inline void RpcMsg::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.path)
}
inline void RpcMsg::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:dcrpc.RpcMsg.path)
}
inline void RpcMsg::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dcrpc.RpcMsg.path)
}
inline ::std::string* RpcMsg::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.path)
  return path_;
}
inline ::std::string* RpcMsg::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RpcMsg::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.path)
}

// optional .dcrpc.RpcMsg.Request request = 2;
inline bool RpcMsg::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMsg::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcMsg::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcMsg::clear_request() {
  if (request_ != NULL) request_->::dcrpc::RpcMsg_Request::Clear();
  clear_has_request();
}
inline const ::dcrpc::RpcMsg_Request& RpcMsg::request() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::dcrpc::RpcMsg_Request* RpcMsg::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::dcrpc::RpcMsg_Request;
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.request)
  return request_;
}
inline ::dcrpc::RpcMsg_Request* RpcMsg::release_request() {
  clear_has_request();
  ::dcrpc::RpcMsg_Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline void RpcMsg::set_allocated_request(::dcrpc::RpcMsg_Request* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.request)
}

// optional .dcrpc.RpcMsg.Response response = 3;
inline bool RpcMsg::has_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMsg::set_has_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcMsg::clear_has_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcMsg::clear_response() {
  if (response_ != NULL) response_->::dcrpc::RpcMsg_Response::Clear();
  clear_has_response();
}
inline const ::dcrpc::RpcMsg_Response& RpcMsg::response() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::dcrpc::RpcMsg_Response* RpcMsg::mutable_response() {
  set_has_response();
  if (response_ == NULL) response_ = new ::dcrpc::RpcMsg_Response;
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.response)
  return response_;
}
inline ::dcrpc::RpcMsg_Response* RpcMsg::release_response() {
  clear_has_response();
  ::dcrpc::RpcMsg_Response* temp = response_;
  response_ = NULL;
  return temp;
}
inline void RpcMsg::set_allocated_response(::dcrpc::RpcMsg_Response* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.response)
}

// optional .dcrpc.RpcMsg.Notify notify = 4;
inline bool RpcMsg::has_notify() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcMsg::set_has_notify() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcMsg::clear_has_notify() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcMsg::clear_notify() {
  if (notify_ != NULL) notify_->::dcrpc::RpcMsg_Notify::Clear();
  clear_has_notify();
}
inline const ::dcrpc::RpcMsg_Notify& RpcMsg::notify() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.notify)
  return notify_ != NULL ? *notify_ : *default_instance_->notify_;
}
inline ::dcrpc::RpcMsg_Notify* RpcMsg::mutable_notify() {
  set_has_notify();
  if (notify_ == NULL) notify_ = new ::dcrpc::RpcMsg_Notify;
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.notify)
  return notify_;
}
inline ::dcrpc::RpcMsg_Notify* RpcMsg::release_notify() {
  clear_has_notify();
  ::dcrpc::RpcMsg_Notify* temp = notify_;
  notify_ = NULL;
  return temp;
}
inline void RpcMsg::set_allocated_notify(::dcrpc::RpcMsg_Notify* notify) {
  delete notify_;
  notify_ = notify;
  if (notify) {
    set_has_notify();
  } else {
    clear_has_notify();
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.notify)
}

// optional .dcrpc.RpcMsg.Cookie cookie = 5;
inline bool RpcMsg::has_cookie() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcMsg::set_has_cookie() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcMsg::clear_has_cookie() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcMsg::clear_cookie() {
  if (cookie_ != NULL) cookie_->::dcrpc::RpcMsg_Cookie::Clear();
  clear_has_cookie();
}
inline const ::dcrpc::RpcMsg_Cookie& RpcMsg::cookie() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.cookie)
  return cookie_ != NULL ? *cookie_ : *default_instance_->cookie_;
}
inline ::dcrpc::RpcMsg_Cookie* RpcMsg::mutable_cookie() {
  set_has_cookie();
  if (cookie_ == NULL) cookie_ = new ::dcrpc::RpcMsg_Cookie;
  // @@protoc_insertion_point(field_mutable:dcrpc.RpcMsg.cookie)
  return cookie_;
}
inline ::dcrpc::RpcMsg_Cookie* RpcMsg::release_cookie() {
  clear_has_cookie();
  ::dcrpc::RpcMsg_Cookie* temp = cookie_;
  cookie_ = NULL;
  return temp;
}
inline void RpcMsg::set_allocated_cookie(::dcrpc::RpcMsg_Cookie* cookie) {
  delete cookie_;
  cookie_ = cookie;
  if (cookie) {
    set_has_cookie();
  } else {
    clear_has_cookie();
  }
  // @@protoc_insertion_point(field_set_allocated:dcrpc.RpcMsg.cookie)
}

// optional .dcrpc.RpcMsg.StatusCode status = 6;
inline bool RpcMsg::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpcMsg::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RpcMsg::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RpcMsg::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::dcrpc::RpcMsg_StatusCode RpcMsg::status() const {
  // @@protoc_insertion_point(field_get:dcrpc.RpcMsg.status)
  return static_cast< ::dcrpc::RpcMsg_StatusCode >(status_);
}
inline void RpcMsg::set_status(::dcrpc::RpcMsg_StatusCode value) {
  assert(::dcrpc::RpcMsg_StatusCode_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dcrpc.RpcMsg.status)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dcrpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dcrpc::RpcMsg_StatusCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcrpc::RpcMsg_StatusCode>() {
  return ::dcrpc::RpcMsg_StatusCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dcrpc_2eproto__INCLUDED
